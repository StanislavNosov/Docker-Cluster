apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-init-scripts
  namespace: jenkins
data:
  jenkins-create-user.groovy: |-
  
    import jenkins.model.*
    import hudson.security.*
    import jenkins.security.s2m.AdminWhitelistRule
    sleep 10000

    def instance = Jenkins.getInstance()
     
    def user = new File("/run/secrets/username").text.trim()
    def pass = new File("/run/secrets/password").text.trim()
     
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount(user, pass)
    instance.setSecurityRealm(hudsonRealm)
     
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    instance.setAuthorizationStrategy(strategy)
    instance.save()
     
    Jenkins.instance.getInjector().getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)
  jenkins-install-plugins.groovy: |-
    import jenkins.model.*
    import hudson.model.*;
    def instance = Jenkins.getInstance()
    def activatePlugin(plugin) {
            if (! plugin.isEnabled()) {
            plugin.enable()
            deployed = true
            }
            plugin.getDependencies().each {
                activatePlugin(pm.getPlugin(it.shortName))
            }
        }
        
    Thread.start {
        sleep 10000
        pm = instance.pluginManager
        uc = instance.updateCenter
        pm.plugins.each { 
            plugin ->plugin.disable()
            }
        
        deployed = false
    
        
        ["git", "active-directory","role-strategy","github","gerrit-trigger","email-ext"].each {
        if (! pm.getPlugin(it)) {
          println("Installing plugin $it")
          deployment = uc.getPlugin(it).deploy(true)
          deployment.get()
        
        }
        activatePlugin(pm.getPlugin(it))
        }
        
        if (deployed) {
        println("saving Jenkins configuration!")
        instance.save()
        }
    
    }
    