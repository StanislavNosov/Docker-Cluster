apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-rules
  namespace: monitoring
data:
  alert.rules: |-
    ## alert.rules ##

    #
    # CPU Alerts
    #
    ALERT HighCPU
      IF ((sum(node_cpu{mode=~"user|nice|system|irq|softirq|steal|idle|iowait"}) by (instance, job)) - ( sum(node_cpu{mode=~"idle|iowait"}) by (instance,job) )   )   /  (sum(node_cpu{mode=~"user|nice|system|irq|softirq|steal|idle|iowait"}) by (instance, job)) * 100 > 95
      FOR 10m
      LABELS { severity="page" }
      ANNOTATIONS {
        summary = "High CPU Usage",
        description = "This machine  has really high CPU usage for over 10m",
      }

    #
    # DNS Lookup failures
    #
    ALERT DNSLookupFailureFromPrometheus
      IF prometheus_dns_sd_lookup_failures_total > 5
      FOR 1m
      LABELS { severity="page" }
      ANNOTATIONS {
        summary = "Prometheus reported over 5 DNS lookup failure",
        description = "The prometheus unit reported that it failed to query the DNS.  Look at the kube-dns to see if it is having any problems",
      }


    ALERT NodeLoadAverage
      IF ((node_load5 / count without (cpu, mode) (node_cpu{mode="system"})) > 1)
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: High Average Load detected",
        DESCRIPTION = "{{$labels.instance}}: Average Load is high"
      }
    ALERT NodeSwapUsage
      IF (((node_memory_SwapTotal-node_memory_SwapFree)/node_memory_SwapTotal)*100) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Swap usage detected",
        DESCRIPTION = "{{$labels.instance}}: Swap usage usage is above 75% (current value is: {{ $value }})"
      }

    ALERT NodeMemoryUsage
      IF (((node_memory_MemTotal-node_memory_MemFree-node_memory_Cached)/(node_memory_MemTotal)*100)) > 75
      FOR 2m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: High memory usage detected",
        DESCRIPTION = "{{$labels.instance}}: Memory usage is above 75% (current value is: {{ $value }})"
      }
    ALERT NodeLowDataDisk
      IF ((node_filesystem_size{mountpoint="/node_datafs",app="prometheus-node-exporter"} - node_filesystem_free{mountpoint="/node_datafs",app="prometheus-node-exporter"} ) / node_filesystem_size{mountpoint="/node_datafs",app="prometheus-node-exporter"} * 100) > 75
      FOR 1m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Low data disk space",
        DESCRIPTION = "{{$labels.instance}}: data disk usage is above 75% (current value is: {{ $value }})"
      }

    ALERT NodeLowRootDisk
      IF ((node_filesystem_size{mountpoint="/node_rootfs",app="prometheus-node-exporter"} - node_filesystem_free{mountpoint="/node_rootfs",app="prometheus-node-exporter"} ) / node_filesystem_size{mountpoint="/node_rootfs",app="prometheus-node-exporter"} * 100) > 75
      FOR 1m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        SUMMARY = "{{$labels.instance}}: Low root disk space",
        DESCRIPTION = "{{$labels.instance}}: root disk usage is above 75% (current value is: {{ $value }})"
      }
    ALERT DeploymentGenerationMismatch
      IF          kube_deployment_status_observed_generation{job="kubernetes-service-endpoints"} != kube_deployment_status_observed_generation{job="kubernetes-service-endpoints"}
      FOR         5m
      LABELS      { severity="page" }
      ANNOTATIONS {
        summary = "Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed",
        description = "Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed - observed generation != intended generation.",
     }

     ALERT DeploymentReplicasMismatch
      IF          (kube_deployment_spec_replicas{job="kubernetes-service-endpoints"} != kube_deployment_status_replicas_available{job="kubernetes-service-endpoints"}) or (kube_deployment_spec_replicas{job="kubernetes-service-endpoints"} unless kube_deployment_status_replicas_available{job="kubernetes-service-endpoints"})
      FOR         5m
      LABELS      { severity="page" }
      ANNOTATIONS {
        summary = "Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed",
        description = "Deployment of {{$labels.namespace}}/{{$labels.deployment}} failed - observed replicas != intended replicas.",
     }

    ALERT PodRestartingTooMuch
      IF          rate(kube_pod_container_status_restarts[1m]) > 1/(5*60)
      FOR         1h
      LABELS      { severity="page" }
      ANNOTATIONS {
        summary = "Pod {{$labels.namespace}}/{{$label.pod}} restarting too much.",
        description = "Pod {{$labels.namespace}}/{{$label.pod}} restarting too much.",
      }

    ALERT InstanceDown
      IF up == 0
      FOR 5m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        summary = "Instance {{$labels.instance}} down",
        description = "{{$labels.instance}} of job {{$labels.job}} has been down for more than 5 minutes.",
      }

    ALERT KubeApiserverIsDown
      IF kube_pod_container_status_ready{container="kube-apiserver"}  == 0
      FOR 5m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        summary = "kube-apiserver in pod {{$labels.pod}} is down",
        description = "kube-apiserver in pod {{$labels.pod}} is down.",
      }
    ALERT KubeControllerManagerIsDown
      IF kube_pod_container_status_ready{container="kube-controller-manager"}  == 0
      FOR 5m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        summary = "kube-controller-manager in pod {{$labels.pod}} is down",
        description = "kube-controller-manager in pod {{$labels.pod}} is down.",
      }
    ALERT KubeSchedulerIsDown
      IF kube_pod_container_status_ready{container="kube-scheduler"}  == 0
      FOR 5m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        summary = "kube-scheduler in pod {{$labels.pod}} is down",
        description = "kube-scheduler in pod {{$labels.pod}} is down.",
      }
    ALERT etcdIsDown
      IF kube_pod_container_status_ready{container="etcd-container"}  == 0
      FOR 5m
      LABELS {
        severity="page"
      }
      ANNOTATIONS {
        summary = "etcd-container in pod {{$labels.pod}} is down",
        description = "etcd-container in pod {{$labels.pod}} is down.",
      }