#!${bin_dir}/bin/sh

########################################
#
####	Environment Variables
#
########################################

export USER=${USER:=SYSTEM}
export PASSWORD=Toor1234
export HOST=${HOST:=sports-hana.mo.sap.corp}
export PORT=${PORT:=30827}
export E2EPWD=${E2EPWD:=Toor1234}
export E2ESPORTSTYPE=${E2ESPORTSTYPE:=Soccer}
export COOKIE_PATH=/tools/cookies
export CHECK="#0"
export E2ESPORTSTYPES=${E2ESPORTSTYPES:="Soccer Handball Basketball IceHockey Ski"}

export IS_CLOUD=$(echo $HOST | grep 'hana.ondemand.com')
if [ -z "$IS_CLOUD" ]; then
	export IS_CLOUD=$(echo $HOST | grep 'itc.sap.com')
fi

if [ $PORT == "443" ]; then
	export INSTANCE=00
	export PROTOCOL=https
else
	export INSTANCE=${PORT: -2:2}
	if [ $PORT == $INSTANCE ]; then
		export INSTANCE=00 #fallback if port has just 2 chars
	fi
	export PROTOCOL=http
fi

function login {
	echo
	echo "Instance and Host:Port: $INSTANCE  =>  $PROTOCOL://$HOST:$PORT"
	echo

	#returns "unsafe" token
	token_string=$(curl -s -D - -H "x-csrf-token: Fetch" "${PROTOCOL}://${HOST}:${PORT}/sap/hana/xs/formLogin/token.xsjs" | grep "x-csrf-token")
	TOKEN=${token_string: 14:-1}

	#do form based login
	curl -X POST -s -c $COOKIE_PATH -H "x-csrf-token: $TOKEN" --data "xs-username=$USER&xs-password=$PASSWORD" "${PROTOCOL}://${HOST}:${PORT}/sap/hana/xs/formLogin/login.xscfunc"
	
	#get real csrf-token
	token_string=$(curl -u $USER:$PASSWORD -b $COOKIE_PATH -s -D - -H "x-csrf-token: Fetch" "${PROTOCOL}://${HOST}:${PORT}/sap/hana/xs/formLogin/token.xsjs" | grep "x-csrf-token")
	export TOKEN=${token_string: 14:-1}
	echo
	echo "x-csrf-token: $TOKEN"
	echo
}

function checkSportsType {
	echo
	echo "check SportsType for: ${E2ESPORTSTYPE}"
	echo
	sh /tools/execute_sql "select * from \"sap.sports.fnd.module.prosports.private.table::SPORTS_TYPES\" where SPORTS_TYPE = '${E2ESPORTSTYPE}'" "SELECT" > /tools/checkSportsType
	export CHECK=`cat /tools/checkSportsType | grep "rows" | sed -r s/.*\"rows\":/\#/g  | cut -c 1-2`
}

function createTestUser {
	echo
	echo "Create E2E Test User: ${E2EUSER}"
	echo
	sh /tools/execute_sql "create user ${E2EUSER} password ${E2EPWD}" "UPDATE"
	sh /tools/execute_sql "grant \"SAP_SPORTS_Admin\" to ${E2EUSER}" "UPDATE"
	sh /tools/execute_sql "call \"sap.sports.fnd.db.schema.authorization::updateUserPrivileges\" ('${E2EUSER}')" "CALL"
	sh /tools/execute_sql "upsert \"sap.sports.fnd.db.schema::PERSONS\" ( PERSON_ID, FIRST_NAME, LAST_NAME, GENDER, USER_ID ) VALUES ( '${E2EPERSON_ID}', '${E2ESPORTSTYPE}', 'Tester', 'MALE', '${E2EUSER}' ) with primary key" "UPDATE"
	sh /tools/execute_sql "upsert \"sap.sports.fnd.module.prosports.private.table::USERS_CLUB_AND_SPORTS_TYPE\" ( USER_ID , SPORTS_TYPE, CLUB_ID ) values ( '${E2EUSER}', '${E2ESPORTSTYPE}' , null) with primary key" "UPDATE"
}

# xs security authorization for user

login

echo "create E2E Test user for Sportstypes:  ${E2ESPORTSTYPES[@]}"

for t in ${E2ESPORTSTYPES[@]} 
do
	export E2ESPORTSTYPE=$t
	
	export SPORTSTYPE=`echo ${E2ESPORTSTYPE} | tr [a-z] [A-Z]`
	export E2EUSER=E2E${SPORTSTYPE}

	export PART=`echo ${SPORTSTYPE}______ | cut -c 1-6`
	export E2EPERSON_ID=E2ETEST_${PART}_PERSON_0000000000
	
	if [ -z "$TOKEN" ]; then
		echo
		echo "-----------------------------------"
		echo "no user created"
		echo "-----------------------------------"
		echo
	else
		checkSportsType
		if [ $CHECK == "#1" ]; then
			createTestUser
		else
			echo
			echo "-----------------------------------"
			echo "SportsType ${E2ESPORTSTYPE} is not supported"
			echo "-----------------------------------"
			echo
		fi
	fi
done
